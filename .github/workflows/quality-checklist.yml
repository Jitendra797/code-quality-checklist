name: Code Quality Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # 1. Check Export Function Pattern
      - name: Check export patterns
        run: |
          npx ts-node -e "
            const glob = require('glob');
            const fs = require('fs');
            const files: string[] = glob.sync('app/**/*.tsx');
            let hasError: boolean = false;

            files.forEach((file: string) => {
              const content: string = fs.readFileSync(file, 'utf8');
              
              // Check for arrow function exports
              const hasArrowFunction = content.match(/export\s+const\s+\w+\s*=\s*(\(\)|[\w\s,]*)\s*=>/);
              
              // Check for non-exported functions
              const hasNonExportedFunction = content.match(/^function\s+[A-Z]\w*|const\s+[A-Z]\w*\s*=/m);
              
              // Check for proper export function pattern
              const hasProperExport = content.match(/export\s+function\s+[A-Z]\w*\s*\(/);
              
              if (hasArrowFunction) {
                console.error(`${file}: Uses arrow function instead of 'export function'`);
                hasError = true;
              }
              
              if (hasNonExportedFunction) {
                console.error(`${file}: Contains function that should use 'export function'`);
                hasError = true;
              }
              
              if (!hasProperExport && (hasArrowFunction || hasNonExportedFunction)) {
                console.error(`${file}: Missing proper 'export function' pattern`);
                hasError = true;
              }
            });

            if (hasError) {
              process.exit(1);
            }
          "

      # 2. Check State Variable Comments
      - name: Check state variable comments
        run: |
          npx ts-node -e "
            const glob = require('glob');
            const fs = require('fs');
            const files: string[] = glob.sync('app/**/*.tsx');
            let hasError: boolean = false;

            files.forEach((file: string) => {
              const content: string = fs.readFileSync(file, 'utf8');
              
              // Find useState declarations
              const stateDeclarations = content.matchAll(/const\s+\[\w+,\s*set\w+\]\s*=\s*useState[<\w+>]*\(/g);
              
              for (const match of stateDeclarations) {
                const linePosition = content.substring(0, match.index).split('\n').length;
                const previousLine = content.split('\n')[linePosition - 2];
                
                // Check if there's a comment above the useState
                if (!previousLine?.trim().startsWith('//')) {
                  console.error(`${file} line ${linePosition}: Missing comment for state variable`);
                  hasError = true;
                }
              }
            });

            if (hasError) {
              process.exit(1);
            }
          "

      # 3. Check Variable Naming Convention (camelCase)
      - name: Check variable naming conventions
        run: |
          npx ts-node -e "
          const glob = require('glob');
          const fs = require('fs');
          const files: string[] = glob.sync('app/**/*.tsx');
          let hasError: boolean = false;

          // Regular expression for variable declarations only
          const variableDeclaration = /\b(const|let|var)\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*[=:]/g;

          // Checks if a variable name follows camelCase
          function isCamelCase(name: string): boolean {
              // Skip React component names (they should be PascalCase)
              if (/^[A-Z][a-zA-Z0-9]*$/.test(name)) {
              return true;
              }
              // Check for proper camelCase
              return /^[a-z][a-zA-Z0-9]*$/.test(name) && !name.includes('_');
          }

          files.forEach((file: string) => {
              const content: string = fs.readFileSync(file, 'utf8');
              
              // Check variable declarations
              let match;
              while ((match = variableDeclaration.exec(content)) !== null) {
              const varName = match[2];
              if (!isCamelCase(varName)) {
                  console.error(`${file}: Variable '${varName}' should be in camelCase`);
                  hasError = true;
              }
              }
          });

          if (hasError) {
              process.exit(1);
          }
          "

      # 4. ESLint and Prettier Checks
      - name: Run ESLint and Prettier
        run: |
          # Run ESLint
          npx eslint "app/**/*.{ts,tsx}" --max-warnings 0

          # Check Prettier formatting
          npx prettier --check "app/**/*.{ts,tsx}"

      # 5. Check Storybook Files Exist
      - name: Check Storybook files exist
        run: |
          npx ts-node -e "
            const glob = require('glob');
            const fs = require('fs');
            const path = require('path');

            interface ComponentFile {
              path: string;
              name: string;
            }

            let hasError: boolean = false;

            // Find all component files
            const componentFiles = glob.sync('app/**/*.tsx');

            componentFiles.forEach((componentFile: string) => {
              const content = fs.readFileSync(componentFile, 'utf8');
              
              // Check if file contains a React component
              const hasComponent = content.match(/export\s+(function|const)\s+([A-Z]\w+)/);
              
              if (hasComponent) {
                const componentName = hasComponent[2];
                const storyFile = path.join('stories', `${componentName}.stories.ts`);
                
                // Check if story file exists
                if (!fs.existsSync(storyFile)) {
                  console.error(`\nError: Missing Storybook file for component '${componentName}'`);
                  console.error(`Component file: ${componentFile}`);
                  console.error(`Expected story file: ${storyFile}`);
                  hasError = true;
                } else {
                  // Verify story file contents
                  const storyContent = fs.readFileSync(storyFile, 'utf8');
                  
                  // Check if story imports the component
                  if (!storyContent.includes(`import { ${componentName} }`)) {
                    console.error(`\nError: Story file doesn't import component '${componentName}'`);
                    console.error(`Story file: ${storyFile}`);
                    hasError = true;
                  }

                  // Check if story configures the component
                  if (!storyContent.includes(`component: ${componentName}`)) {
                    console.error(`\nError: Story file doesn't configure component '${componentName}'`);
                    console.error(`Story file: ${storyFile}`);
                    hasError = true;
                  }
                }
              }
            });

            if (hasError) {
              process.exit(1);
            }
          "
